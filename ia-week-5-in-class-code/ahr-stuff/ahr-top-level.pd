#N canvas 201 135 705 424 10;
#X obj 44 364 dac~;
#X obj 44 289 osc~ 600;
#X obj 166 267 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 166 295 ahr~ 5 10 566;
#X obj 44 179 ahr2~;
#X msg 44 156 \$1 50 500;
#X obj 44 29 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 44 327 *~ 0.2;
#X obj 44 222 *~ 1000;
#X obj 44 245 +~ 100;
#X obj 44 51 random 1000;
#X obj 44 73 * 0.001;
#X obj 44 116 * 1000;
#X obj 44 95 pow 5;
#X text 149 13 //here we create an object that generates a ramp to
1 \, holds \, then ramps back down to 0.0. this commonly used action
defines an 'envelope.' by making an abstraction \, we can easily reuse
it in different patches.;
#X text 118 159 //the second implementation expects a list (a h r)
to generate the ramp;
#X text 259 296 //our first implementation uses instance arguments
to fix the attack \, hold \, and release times;
#X connect 1 0 7 0;
#X connect 2 0 3 0;
#X connect 4 0 8 0;
#X connect 5 0 4 0;
#X connect 6 0 10 0;
#X connect 7 0 0 1;
#X connect 7 0 0 0;
#X connect 8 0 9 0;
#X connect 9 0 1 0;
#X connect 10 0 11 0;
#X connect 11 0 13 0;
#X connect 12 0 5 0;
#X connect 13 0 12 0;
